version: '3.8'

services:
  # PostgreSQL 数据库 + TimescaleDB 时序数据库扩展
  postgres:
    image: timescale/timescaledb:latest-pg15
    container_name: iot-postgres
    environment:
      POSTGRES_DB: iot_platform
      POSTGRES_USER: iot_user
      POSTGRES_PASSWORD: iot_password
      TIMESCALEDB_TELEMETRY: "off"
      TZ: Asia/Shanghai
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/postgresql.conf:/etc/postgresql/postgresql.conf:ro
      - ./backend/prisma/migrations/v2-timescaledb-setup.sql:/docker-entrypoint-initdb.d/99-timescaledb-setup.sql:ro
    command: ["postgres", "-c", "config_file=/etc/postgresql/postgresql.conf"]
    ports:
      - "5432:5432"
    networks:
      - iot-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U iot_user -d iot_platform"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis 缓存
  redis:
    image: redis:7-alpine
    container_name: iot-redis
    command: redis-server --appendonly yes
    environment:
      TZ: Asia/Shanghai
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - iot-network
    restart: unless-stopped

  # MQTT Broker - EMQX
  emqx:
    image: emqx/emqx:5.4.0
    container_name: iot-emqx
    environment:
      - TZ=Asia/Shanghai
    volumes:
      - emqx_data:/opt/emqx/data
      - emqx_log:/opt/emqx/log
    ports:
      - "1883:1883"    # MQTT TCP
      - "8083:8083"    # MQTT WebSocket
      - "8084:8084"    # MQTT WebSocket Secure
      - "8081:8081"    # HTTP API
      - "8089:8089"    # HTTPS API
      - "18083:18083"  # Dashboard
    networks:
      - iot-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "/opt/emqx/bin/emqx", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 后端服务
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: iot-backend
    environment:
      - NODE_ENV=development
      - TZ=Asia/Shanghai
      # 使用配置文件
      - CONFIG_FILE=/app/config/config.json
    volumes:
      - ./backend:/app
      - /app/node_modules
      - ./uploads:/app/uploads
      # 使用配置文件
      - ./docker/backend/config.json:/app/config/config.json:ro
    user: "1001:1001"
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
      emqx:
        condition: service_healthy
    networks:
      - iot-network
    restart: unless-stopped

  # 前端服务
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: iot-frontend
    environment:
      - NODE_ENV=production
      - TZ=Asia/Shanghai
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - iot-network
    restart: unless-stopped

  # Nginx 反向代理 (暂时禁用，因为80端口被系统Nginx占用)
  # nginx:
  #   image: nginx:alpine
  #   container_name: iot-nginx
  #   volumes:
  #     - ./nginx/nginx.conf:/etc/nginx/nginx.conf
  #     - ./nginx/ssl:/etc/nginx/ssl
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #   depends_on:
  #     - frontend
  #     - backend
  #   networks:
  #     - iot-network
  #   restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  emqx_data:
  emqx_log:

networks:
  iot-network:
    driver: bridge
