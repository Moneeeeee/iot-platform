# Fountain IoT Platform - 基础设施层
# 这个文件包含所有基础设施服务，所有阶段都需要

networks:
  iot-net:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres-data:
  timescaledb-data:
  redis-data:
  nats-data:
  emqx-data:
  emqx-log:
  minio-data:

services:
  # ==================== 数据库服务 ====================
  
  postgres:
    image: postgres:16-alpine
    container_name: iot-postgres
    restart: unless-stopped
    networks:
      - iot-net
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: iot_platform
      POSTGRES_USER: iot_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-iot_password_2025}
      POSTGRES_INITDB_ARGS: "-E UTF8 --locale=C"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./configs/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U iot_user -d iot_platform"]
      interval: 10s
      timeout: 5s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  timescaledb:
    image: timescale/timescaledb:latest-pg16
    container_name: iot-timescaledb
    restart: unless-stopped
    networks:
      - iot-net
    ports:
      - "5433:5432"
    environment:
      POSTGRES_DB: iot_timeseries
      POSTGRES_USER: iot_user
      POSTGRES_PASSWORD: ${TIMESCALEDB_PASSWORD:-iot_password_2025}
    volumes:
      - timescaledb-data:/var/lib/postgresql/data
      - ./configs/timescaledb/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U iot_user -d iot_timeseries"]
      interval: 10s
      timeout: 5s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ==================== 缓存与消息队列 ====================
  
  redis:
    image: redis:7-alpine
    container_name: iot-redis
    restart: unless-stopped
    networks:
      - iot-net
    ports:
      - "6379:6379"
    command: >
      redis-server
      --appendonly yes
      --requirepass ${REDIS_PASSWORD:-redis_password_2025}
      --maxmemory 2gb
      --maxmemory-policy allkeys-lru
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ==================== 消息总线 ====================
  
  nats:
    image: nats:2.10
    container_name: iot-nats
    restart: unless-stopped
    networks:
      - iot-net
    ports:
      - "4222:4222"    # Client 连接
      - "8222:8222"    # HTTP 管理
      - "6222:6222"    # 集群通信
    command: ["-js", "-m", "8222"]
    volumes:
      - nats-data:/data
    environment:
      - NATS_JETSTREAM_STORE_DIR=/data
    healthcheck:
      test: ["CMD", "nats-server", "-v"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ==================== MQTT Broker ====================
  
  emqx:
    image: emqx/emqx:5.5.0
    container_name: iot-emqx
    restart: unless-stopped
    networks:
      - iot-net
    ports:
      - "1883:1883"    # MQTT
      - "8883:8883"    # MQTT/SSL
      - "8083:8083"    # MQTT/WebSocket
      - "8084:8084"    # MQTT/WebSocket/SSL
      - "18083:18083"  # Dashboard
    environment:
      EMQX_NAME: iot-emqx
      EMQX_HOST: 127.0.0.1
      EMQX_DASHBOARD__DEFAULT_USERNAME: ${EMQX_ADMIN_USER:-admin}
      EMQX_DASHBOARD__DEFAULT_PASSWORD: ${EMQX_ADMIN_PASSWORD:-public2025}
      EMQX_LOG__CONSOLE__LEVEL: warning
    volumes:
      - emqx-data:/opt/emqx/data
      - emqx-log:/opt/emqx/log
      - ./configs/emqx/emqx.conf:/opt/emqx/etc/emqx.conf:ro
    healthcheck:
      test: ["CMD", "emqx", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ==================== 对象存储 ====================
  
  minio:
    image: minio/minio:latest
    container_name: iot-minio
    restart: unless-stopped
    networks:
      - iot-net
    ports:
      - "9000:9000"    # API
      - "9001:9001"    # Console
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minio_admin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minio_password_2025}
    command: server /data --console-address ":9001"
    volumes:
      - minio-data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 5s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ==================== 初始化服务 ====================
  
  init-minio:
    image: minio/mc:latest
    container_name: iot-init-minio
    networks:
      - iot-net
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      mc alias set myminio http://minio:9000 ${MINIO_ROOT_USER:-minio_admin} ${MINIO_ROOT_PASSWORD:-minio_password_2025};
      mc mb myminio/firmware --ignore-existing;
      mc mb myminio/video --ignore-existing;
      mc mb myminio/logs --ignore-existing;
      mc mb myminio/files --ignore-existing;
      mc anonymous set download myminio/firmware;
      echo 'MinIO buckets initialized';
      "
    restart: "no"

