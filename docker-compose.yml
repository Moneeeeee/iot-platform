version: '3.8'

services:
  # PostgreSQL 数据库
  postgres:
    image: postgres:15-alpine
    container_name: iot-postgres
    environment:
      POSTGRES_DB: iot_platform
      POSTGRES_USER: iot_user
      POSTGRES_PASSWORD: iot_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    networks:
      - iot-network
    restart: unless-stopped

  # Redis 缓存
  redis:
    image: redis:7-alpine
    container_name: iot-redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - iot-network
    restart: unless-stopped

  # MQTT Broker - EMQX
  emqx:
    image: emqx/emqx:5.4.0
    container_name: iot-emqx
    environment:
      - EMQX_NAME=iot-emqx
      - EMQX_HOST=iot-emqx
      - EMQX_DASHBOARD__DEFAULT_USERNAME=admin
      - EMQX_DASHBOARD__DEFAULT_PASSWORD=public
      - EMQX_LISTENERS__TCP__DEFAULT__BIND=0.0.0.0:1883
      - EMQX_LISTENERS__WS__DEFAULT__BIND=0.0.0.0:8083
      - EMQX_LISTENERS__WSS__DEFAULT__BIND=0.0.0.0:8084
      - EMQX_LISTENERS__HTTP__DEFAULT__BIND=0.0.0.0:8081
      - EMQX_LISTENERS__HTTPS__DEFAULT__BIND=0.0.0.0:8089
    volumes:
      - emqx_data:/opt/emqx/data
      - emqx_log:/opt/emqx/log
    ports:
      - "1883:1883"    # MQTT TCP
      - "8083:8083"    # MQTT WebSocket
      - "8084:8084"    # MQTT WebSocket Secure
      - "8081:8081"    # HTTP API
      - "8089:8089"    # HTTPS API
      - "18083:18083"  # Dashboard
    networks:
      - iot-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "/opt/emqx/bin/emqx", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 后端服务
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: iot-backend
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://iot_user:iot_password@postgres:5432/iot_platform
      - REDIS_URL=redis://redis:6379
      - MQTT_BROKER_URL=mqtt://emqx:1883
      - JWT_SECRET=iot-platform-super-secret-jwt-key-2024
      - JWT_EXPIRES_IN=7d
      - LOG_LEVEL=info
      - CORS_ORIGIN=http://localhost:3000
      - RATE_LIMIT_WINDOW_MS=900000
      - RATE_LIMIT_MAX_REQUESTS=100
    volumes:
      - ./backend:/app
      - /app/node_modules
      - ./uploads:/app/uploads
      - ./logs:/app/logs
    user: "1001:1001"
    ports:
      - "8000:8000"
    depends_on:
      - postgres
      - redis
      - emqx
    networks:
      - iot-network
    restart: unless-stopped

  # 前端服务
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: iot-frontend
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=http://localhost:8000
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - iot-network
    restart: unless-stopped

  # Nginx 反向代理 (暂时禁用，因为80端口被系统Nginx占用)
  # nginx:
  #   image: nginx:alpine
  #   container_name: iot-nginx
  #   volumes:
  #     - ./nginx/nginx.conf:/etc/nginx/nginx.conf
  #     - ./nginx/ssl:/etc/nginx/ssl
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #   depends_on:
  #     - frontend
  #     - backend
  #   networks:
  #     - iot-network
  #   restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  emqx_data:
  emqx_log:

networks:
  iot-network:
    driver: bridge
