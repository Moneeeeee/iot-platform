# Fountain IoT Platform - Phase 3 高级服务
# 视频流 + 数据分析 + 监控栈

services:
  # ==================== 视频流服务 ====================
  
  stream-service:
    build:
      context: ./backend/stream-service
      dockerfile: Dockerfile
    image: iot-platform/stream-service:latest
    container_name: iot-stream-service
    restart: unless-stopped
    networks:
      - iot-net
    ports:
      - "8010:8010"      # HTTP API
      - "1935:1935"      # RTMP
      - "8554:8554"      # RTSP
      - "8888:8888"      # WebRTC
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      PORT: 8010
      LOG_LEVEL: ${LOG_LEVEL:-info}
      
      # NATS
      NATS_URL: nats://nats:4222
      
      # Redis
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis_password_2025}
      
      # MinIO
      MINIO_ENDPOINT: minio
      MINIO_PORT: 9000
      MINIO_ACCESS_KEY: ${MINIO_ROOT_USER:-minio_admin}
      MINIO_SECRET_KEY: ${MINIO_ROOT_PASSWORD:-minio_password_2025}
      MINIO_USE_SSL: false
      MINIO_BUCKET: video
      
      # 视频配置
      VIDEO_CODEC: h265
      VIDEO_BITRATE: 2000000
      SEGMENT_DURATION: 10
      MAX_STREAMS: 100
    depends_on:
      nats:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "-q", "-O", "-", "http://localhost:8010/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ==================== 数据分析服务 ====================
  
  analytics-service:
    build:
      context: ./backend/analytics-service
      dockerfile: Dockerfile
    image: iot-platform/analytics-service:latest
    container_name: iot-analytics-service
    restart: unless-stopped
    networks:
      - iot-net
    ports:
      - "8011:8011"
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      PORT: 8011
      LOG_LEVEL: ${LOG_LEVEL:-info}
      
      # TimescaleDB
      TIMESCALEDB_HOST: timescaledb
      TIMESCALEDB_PORT: 5432
      TIMESCALEDB_DB: iot_timeseries
      TIMESCALEDB_USER: iot_user
      TIMESCALEDB_PASSWORD: ${TIMESCALEDB_PASSWORD:-iot_password_2025}
      
      # PostgreSQL
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: iot_platform
      POSTGRES_USER: iot_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-iot_password_2025}
      
      # Redis
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis_password_2025}
      
      # NATS
      NATS_URL: nats://nats:4222
      
      # 分析配置
      ANALYTICS_INTERVAL: 3600000  # 1 hour
      CACHE_TTL: 7200              # 2 hours
    depends_on:
      timescaledb:
        condition: service_healthy
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      nats:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "-q", "-O", "-", "http://localhost:8011/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ==================== Prometheus 监控 ====================
  
  prometheus:
    image: prom/prometheus:latest
    container_name: iot-prometheus
    restart: unless-stopped
    networks:
      - iot-net
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    volumes:
      - ./configs/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    healthcheck:
      test: ["CMD", "wget", "-q", "-O", "-", "http://localhost:9090/-/healthy"]
      interval: 10s
      timeout: 5s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ==================== Grafana 可视化 ====================
  
  grafana:
    image: grafana/grafana:latest
    container_name: iot-grafana
    restart: unless-stopped
    networks:
      - iot-net
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_ADMIN_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD:-admin2025}
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource
      GF_SERVER_ROOT_URL: ${GRAFANA_URL:-http://localhost:3001}
    volumes:
      - ./configs/grafana/provisioning:/etc/grafana/provisioning:ro
      - grafana-data:/var/lib/grafana
    depends_on:
      prometheus:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "-q", "-O", "-", "http://localhost:3000/api/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ==================== Loki 日志聚合 ====================
  
  loki:
    image: grafana/loki:latest
    container_name: iot-loki
    restart: unless-stopped
    networks:
      - iot-net
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - ./configs/loki/loki-config.yml:/etc/loki/local-config.yaml:ro
      - loki-data:/loki
    healthcheck:
      test: ["CMD", "wget", "-q", "-O", "-", "http://localhost:3100/ready"]
      interval: 10s
      timeout: 5s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ==================== Promtail 日志采集 ====================
  
  promtail:
    image: grafana/promtail:latest
    container_name: iot-promtail
    restart: unless-stopped
    networks:
      - iot-net
    command: -config.file=/etc/promtail/config.yml
    volumes:
      - ./configs/promtail/promtail-config.yml:/etc/promtail/config.yml:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/log:/var/log:ro
    depends_on:
      loki:
        condition: service_healthy
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ==================== Node Exporter (可选) ====================
  
  node-exporter:
    image: prom/node-exporter:latest
    container_name: iot-node-exporter
    restart: unless-stopped
    networks:
      - iot-net
    ports:
      - "9100:9100"
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

volumes:
  prometheus-data:
  grafana-data:
  loki-data:

networks:
  iot-net:
    external: true

